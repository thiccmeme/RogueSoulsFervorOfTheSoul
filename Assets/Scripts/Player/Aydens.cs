//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.9.0
//     from Assets/Scripts/Player/Aydens.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @Aydens: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Aydens()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Aydens"",
    ""maps"": [
        {
            ""name"": ""Pain"",
            ""id"": ""6e8800fd-6bf6-497c-a28f-8e4d8eaa048e"",
            ""actions"": [
                {
                    ""name"": ""UnEquipItem"",
                    ""type"": ""Button"",
                    ""id"": ""217fdb9b-6b31-4eff-bd42-0cb0ce576c99"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""289652d9-5f8a-4d54-b9cb-9ac410f58d73"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnEquipItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pain
        m_Pain = asset.FindActionMap("Pain", throwIfNotFound: true);
        m_Pain_UnEquipItem = m_Pain.FindAction("UnEquipItem", throwIfNotFound: true);
    }

    ~@Aydens()
    {
        Debug.Assert(!m_Pain.enabled, "This will cause a leak and performance issues, Aydens.Pain.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pain
    private readonly InputActionMap m_Pain;
    private List<IPainActions> m_PainActionsCallbackInterfaces = new List<IPainActions>();
    private readonly InputAction m_Pain_UnEquipItem;
    public struct PainActions
    {
        private @Aydens m_Wrapper;
        public PainActions(@Aydens wrapper) { m_Wrapper = wrapper; }
        public InputAction @UnEquipItem => m_Wrapper.m_Pain_UnEquipItem;
        public InputActionMap Get() { return m_Wrapper.m_Pain; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PainActions set) { return set.Get(); }
        public void AddCallbacks(IPainActions instance)
        {
            if (instance == null || m_Wrapper.m_PainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PainActionsCallbackInterfaces.Add(instance);
            @UnEquipItem.started += instance.OnUnEquipItem;
            @UnEquipItem.performed += instance.OnUnEquipItem;
            @UnEquipItem.canceled += instance.OnUnEquipItem;
        }

        private void UnregisterCallbacks(IPainActions instance)
        {
            @UnEquipItem.started -= instance.OnUnEquipItem;
            @UnEquipItem.performed -= instance.OnUnEquipItem;
            @UnEquipItem.canceled -= instance.OnUnEquipItem;
        }

        public void RemoveCallbacks(IPainActions instance)
        {
            if (m_Wrapper.m_PainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPainActions instance)
        {
            foreach (var item in m_Wrapper.m_PainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PainActions @Pain => new PainActions(this);
    public interface IPainActions
    {
        void OnUnEquipItem(InputAction.CallbackContext context);
    }
}
